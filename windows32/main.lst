Microsoft (R) Macro Assembler Version 11.00.50727.1	    09/29/16 01:26:47
main.asm						     Page 1 - 1


				.586
				.MODEL FLAT	; only 32 bit addresses, no segment:offset

				INCLUDE io.h   ; header file for input/output
			      C ; IO.H -- header file for I/O macros (listing suppressed)
			      C .NOLIST      ; turn off listing
			      C .LIST        ; begin listing
			      C 

				.STACK 4096	   ; allocate 4096 bytes for the stack

 00000000			.DATA

					; We will be using DWORDS, because scores of more than 65535 seem reasonable,
					; and scores of more than 4294967295 do not.
					
 00000000 00000000			grade1			DWORD	0
 00000004 00000000			grade2			DWORD	0
 00000008 00000000			grade3			DWORD	0
 0000000C 00000000			grade4			DWORD	0
					
 00000010 00000000			weight1			DWORD	0
 00000014 00000000			weight2			DWORD	0
 00000018 00000000			weight3			DWORD	0
 0000001C 00000000			weight4			DWORD	0


					; The input macro expects a C-string (null terminated string) to display as a prompt.

					; We need 8 prompts, 4 for grades and 4 for weights, and the prompts are almost exactly
					; the same for each, except that each ends with a number that will increment with each use.
					; Instead of duplicating the same prompt 4 times in memory, we will use one prompt and change
					; the number before each use.

					; The actual prompts will look like:
					; "Grade 1:"
					; or
					; "Weight 3:"
					; depending on the iteration.

 00000020 47 72 61 64 65		gradePrompt		BYTE	"Grade "	; Stays constant
	   20
 00000026 58				gradeNumber		BYTE	"X"			; "X" will be replaced with a number at runtime
 00000027  3A 00							BYTE	":", 0		; Stays constant - null terminated

 00000029 57 65 69 67 68		weightPrompt	BYTE	"Weight "	; Stays constant
	   74 20
 00000030 58				weightNumber	BYTE	"X"			; "X" will be replaced with a number at runtime
 00000031  3A 00							BYTE	":", 0		; Stays constant - null terminated

					; The input macro needs a 40 character string to store data in

 00000033  00000028 [			string			BYTE	40	DUP	(0)
	    00
	   ]
					

 00000000			.CODE
 00000000			_MainProc PROC
					
					; Get grade1 and weight1

 00000000  C6 05 00000026 R		mov		gradeNumber,	"1"			; Set gradePrompt to "Grade 1:"
	   31
 00000007  C6 05 00000030 R		mov		weightNumber,	"1"			; Set weightPrompt to "Weight 1:"
	   31

					input	gradePrompt,	string,	40	; Display prompt, string := user input (as string)
					atod	string						; EAX := user input (as integer)
 0000003B  A3 00000000 R		mov		grade1,			eax			; grade1 := EAX

					input	weightPrompt,	string, 40
					atod	string
 0000006D  A3 00000010 R		mov		weight1,		eax			; weight1 := user input (as integer)

					; Repeat the same steps as above for grades 2, 3 and 4

					; Get grade2 and weight2

 00000072  C6 05 00000026 R		mov		gradeNumber,	"2"			; Set prompt to "Grade 2:"
	   32
 00000079  C6 05 00000030 R		mov		weightNumber,	"2"			; Set weightPrompt to "Weight 2:"
	   32
														
					input	gradePrompt,	string,	40
					atod	string
 000000AD  A3 00000004 R		mov		grade2,			eax

					input	weightPrompt,	string, 40
					atod	string
 000000DF  A3 00000014 R		mov		weight2,		eax

					; Get grade3 and weight3

 000000E4  C6 05 00000026 R		mov		gradeNumber,	"3"
	   33
 000000EB  C6 05 00000030 R		mov		weightNumber,	"3"
	   33

					input	gradePrompt,	string,	40
					atod	string
 0000011F  A3 00000008 R		mov		grade3,			eax

					input	weightPrompt,	string, 40
					atod	string
 00000151  A3 00000018 R		mov		weight3,		eax
					
					; Get grade4 and weight4

 00000156  C6 05 00000026 R		mov		gradeNumber,	"4"
	   34
 0000015D  C6 05 00000030 R		mov		weightNumber,	"4"
	   34

					input	gradePrompt,	string,	40
					atod	string
 00000191  A3 0000000C R		mov		grade4,			eax

					input	weightPrompt,	string,	40
					atod	string
 000001C3  A3 0000001C R		mov		weight4,			eax

					; Do the math!

					; TODO

 000001C8  B8 00000000			mov		eax,			0			; exit with return code 0
 000001CD  C3				ret
 000001CE			_MainProc ENDP

				END   ; end of source code
Microsoft (R) Macro Assembler Version 11.00.50727.1	    09/29/16 01:26:47
main.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

atod . . . . . . . . . . . . . .	Proc
atow . . . . . . . . . . . . . .	Proc
dtoa . . . . . . . . . . . . . .	Proc
input  . . . . . . . . . . . . .	Proc
output . . . . . . . . . . . . .	Proc
wtoa . . . . . . . . . . . . . .	Proc


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000005B Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000001CE Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

_MainProc  . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000001CE Public


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
_getInput  . . . . . . . . . . .	L Near	 00000000 FLAT	External
_showOutput  . . . . . . . . . .	L Near	 00000000 FLAT	External
atodproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
atowproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
dtoaproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
grade1 . . . . . . . . . . . . .	DWord	 00000000 _DATA	
grade2 . . . . . . . . . . . . .	DWord	 00000004 _DATA	
grade3 . . . . . . . . . . . . .	DWord	 00000008 _DATA	
grade4 . . . . . . . . . . . . .	DWord	 0000000C _DATA	
gradeNumber  . . . . . . . . . .	Byte	 00000026 _DATA	
gradePrompt  . . . . . . . . . .	Byte	 00000020 _DATA	
string . . . . . . . . . . . . .	Byte	 00000033 _DATA	
weight1  . . . . . . . . . . . .	DWord	 00000010 _DATA	
weight2  . . . . . . . . . . . .	DWord	 00000014 _DATA	
weight3  . . . . . . . . . . . .	DWord	 00000018 _DATA	
weight4  . . . . . . . . . . . .	DWord	 0000001C _DATA	
weightNumber . . . . . . . . . .	Byte	 00000030 _DATA	
weightPrompt . . . . . . . . . .	Byte	 00000029 _DATA	
wtoaproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External

	   0 Warnings
	   0 Errors
